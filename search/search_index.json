{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Grupo 17 - Trabalho de compiladores","text":""},{"location":"#sobre-o-projeto","title":"\ud83d\udcdc Sobre o projeto","text":"<p>Este reposit\u00f3rio \u00e9 dedicado \u00e0 disciplina de Compiladores 1 ministrada pelo professor Dr. S\u00e9rgio Freitas.     A equipe optou por desenvolver um interpretador de portugol.</p>"},{"location":"#contribuidores","title":"\ud83c\udf1f Contribuidores","text":"Caio Mesquita 222024283 Ester Flores Lino da Silva  202063201 Gabriel Marques de Souza 202016266 Manoel Felipe Teixeira Neto  211041240 Mylena Angelica 211029497 Wildemberg Sales 202017503"},{"location":"#documentacao","title":"\ud83d\udcd1 Documenta\u00e7\u00e3o","text":"<ul> <li>Ponto de controle 1 </li> <li>Apresenta\u00e7\u00e3o 1 </li> <li>Ponto de controle 2  </li> <li>Apresenta\u00e7\u00e3o 2 </li> <li>Entrega final </li> <li>Entrevista Final </li> </ul>"},{"location":"decisoes-tecnicas/","title":"Decis\u00f5es t\u00e9cnicas","text":""},{"location":"decisoes-tecnicas/#definicao-do-escopo-do-interpretador","title":"Defini\u00e7\u00e3o do Escopo do Interpretador","text":"<p>O interpretador de Portugol ser\u00e1 desenvolvido para processar e executar programas escritos na linguagem Portugol, com base nas diretrizes definidas pelo site oficial e o manual do G-Portugol. A linguagem tem como objetivo ser simples e did\u00e1tica, utilizando conceitos de programa\u00e7\u00e3o imperativa. O interpretador suportar\u00e1 os seguintes componentes essenciais:</p>"},{"location":"decisoes-tecnicas/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<p>O interpretador suportar\u00e1 os seguintes tipos de dados b\u00e1sicos:</p> <ul> <li> <p>Tipo Inteiro: N\u00fameros inteiros, como 10, -5, 0.</p> </li> <li> <p>Tipo Real: N\u00fameros reais com ponto flutuante, como 3.14, -0.5, 100.0.</p> </li> <li> <p>Tipo Caractere: Um \u00fanico caractere, representado por aspas simples, como 'a', 'b'.</p> </li> <li> <p>Tipo Literal: Cadeias de caracteres entre aspas duplas, como \"Ol\u00e1 Mundo\", \"Portugol\".</p> </li> <li> <p>Tipo L\u00f3gico: Valores booleanos, verdadeiro ou falso.</p> </li> <li> <p>Tipo Vazio: Representa a aus\u00eancia de valor (null).</p> </li> </ul> <p>Esses tipos ser\u00e3o usados para declarar vari\u00e1veis e constantes, e o interpretador verificar\u00e1 se os valores atribu\u00eddos s\u00e3o compat\u00edveis com os tipos declarados.</p>"},{"location":"decisoes-tecnicas/#declaracoes","title":"Declara\u00e7\u00f5es","text":"<p>O interpretador suportar\u00e1 as seguintes declara\u00e7\u00f5es essenciais:</p> <ul> <li>Declara\u00e7\u00e3o de Vari\u00e1veis.</li> </ul>"},{"location":"decisoes-tecnicas/#entrada-e-saida","title":"Entrada e Sa\u00edda","text":"<p>O interpretador incluir\u00e1 opera\u00e7\u00f5es b\u00e1sicas de entrada e sa\u00edda:</p> <ul> <li>Leia: Para ler valores inseridos pelo usu\u00e1rio.</li> <li>Imprima: Para exibir informa\u00e7\u00f5es na tela.</li> </ul>"},{"location":"decisoes-tecnicas/#operadores-e-expressoes","title":"Operadores e Express\u00f5es","text":"<p>O interpretador suportar\u00e1 as seguintes opera\u00e7\u00f5es:</p> <ul> <li> <p>Opera\u00e7\u00f5es Aritm\u00e9ticas: Soma, subtra\u00e7\u00e3o, multiplica\u00e7\u00e3o, divis\u00e3o e m\u00f3dulo.</p> </li> <li> <p>Opera\u00e7\u00f5es Relacionais: Igualdade, diferen\u00e7a, maior que, menor que, maior ou igual, menor ou igual.</p> </li> <li> <p>Opera\u00e7\u00f5es L\u00f3gicas: AND, OR, NOT.</p> </li> <li> <p>Opera\u00e7\u00f5es Bit a Bit: AND, OR, XOR.</p> </li> </ul>"},{"location":"decisoes-tecnicas/#estruturas-de-controle","title":"Estruturas de Controle","text":"<p>O interpretador implementar\u00e1 as seguintes estruturas de controle:</p> <ul> <li> <p>Condicionais (se/ent\u00e3o/sen\u00e3o): Para executar comandos com base em uma condi\u00e7\u00e3o.</p> </li> <li> <p>La\u00e7os de Repeti\u00e7\u00e3o: Para executar comandos repetidamente enquanto uma condi\u00e7\u00e3o for verdadeira.</p> </li> </ul>"},{"location":"decisoes-tecnicas/#testes","title":"Testes","text":"<p>Os testes foram organizados para validar diferentes aspectos do compilador de Portugol, incluindo an\u00e1lise l\u00e9xica, sint\u00e1tica, sem\u00e2ntica e gera\u00e7\u00e3o da AST. Cada teste foi escrito como um arquivo .txt com trechos de c\u00f3digo em Portugol, simulando diferentes situa\u00e7\u00f5es da linguagem, desde estruturas b\u00e1sicas at\u00e9 casos de erro. Esses testes est\u00e3o agrupados em diret\u00f3rios conforme o tipo de funcionalidade testada, facilitando a manuten\u00e7\u00e3o e a identifica\u00e7\u00e3o de falhas espec\u00edficas no comportamento do compilador.</p> <ul> <li> <p>Diret\u00f3rio src/tests/</p> <ul> <li> <p>tests.sh: script respons\u00e1vel por executar os testes.</p> </li> <li> <p>portugol: bin\u00e1rio do interpretador/compilador.</p> </li> <li> <p>tests_arquivos/: pasta dos arquivos de teste organizados por tipo.</p> </li> </ul> </li> <li> <p>Subdiret\u00f3rios de tests_arquivos/</p> <ul> <li>testes_ast:   Gera\u00e7\u00e3o e valida\u00e7\u00e3o da \u00c1rvore Sint\u00e1tica Abstrata (AST)</li> <li>testes_basicos:   Testes simples de sintaxe e execu\u00e7\u00e3o</li> <li>testes_decimais:  Express\u00f5es com n\u00fameros decimais e opera\u00e7\u00f5es com real</li> <li>testes_ifelse:    Testes com estruturas condicionais se e senao</li> <li>testes_numeros_negativos: Express\u00f5es com n\u00fameros negativos e valida\u00e7\u00e3o de sinais</li> <li>testes_operadores:    Testes de operadores aritm\u00e9ticos e l\u00f3gicos (+, -, e, ou, etc)</li> </ul> </li> <li>Arquivos de teste individuais<ul> <li>teste_booleano.txt:   Testes com valores booleanos (verdadeiro / falso)</li> <li>teste_caractere.txt:  Declara\u00e7\u00f5es e uso de vari\u00e1veis do tipo char</li> <li>teste_correcao_igual_operadores.txt:  Corre\u00e7\u00e3o e verifica\u00e7\u00e3o de operadores de compara\u00e7\u00e3o</li> <li>teste_logico.txt: Express\u00f5es com operadores l\u00f3gicos e, ou, nao</li> <li>teste_vazio_erro_incompativel.txt:    Erros relacionados a tipo vazio e incompatibilidades</li> </ul> </li> </ul>"},{"location":"decisoes-tecnicas/#linguagem-e-ferramentas","title":"Linguagem e Ferramentas","text":""},{"location":"decisoes-tecnicas/#flex-analisador-lexico","title":"Flex (Analisador L\u00e9xico)","text":"<p>O Flex ser\u00e1 utilizado para identificar tokens a partir do c\u00f3digo em Portugol. As express\u00f5es regulares definidas no arquivo .l reconhecer\u00e3o tokens como vari\u00e1veis, operadores, palavras-chave e literais.</p>"},{"location":"decisoes-tecnicas/#bison-analisador-sintatico","title":"Bison (Analisador Sint\u00e1tico)","text":"<p>O Bison ser\u00e1 utilizado para definir a gram\u00e1tica e criar o parser que validar\u00e1 a estrutura do c\u00f3digo, gerando a \u00e1rvore sint\u00e1tica abstrata (AST). O arquivo .y do Bison conter\u00e1 as regras de produ\u00e7\u00e3o da gram\u00e1tica, conforme as necessidades do projeto.</p>"},{"location":"decisoes-tecnicas/#estrutura-de-dados-ast","title":"Estrutura de Dados - AST","text":"<p>A \u00c1rvore Sint\u00e1tica Abstrata (AST) ser\u00e1 constru\u00edda no momento da an\u00e1lise sint\u00e1tica. Ela representar\u00e1 a estrutura do programa de forma hier\u00e1rquica, permitindo que o interpretador execute as instru\u00e7\u00f5es de forma eficiente.</p>"},{"location":"decisoes-tecnicas/#interpretacao","title":"Interpreta\u00e7\u00e3o","text":"<p>O interpretador percorrer\u00e1 a AST e executar\u00e1 as opera\u00e7\u00f5es diretamente. Opera\u00e7\u00f5es como atribui\u00e7\u00e3o de vari\u00e1veis, express\u00f5es aritm\u00e9ticas e fluxos de controle ser\u00e3o avaliadas de acordo com as regras da linguagem Portugol.</p>"},{"location":"decisoes-tecnicas/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O interpretador incluir\u00e1 um sistema de tratamento de erros para verificar erros l\u00e9xicos, sint\u00e1ticos e sem\u00e2nticos, fornecendo mensagens claras para o usu\u00e1rio, indicando a localiza\u00e7\u00e3o e o tipo do erro.</p>"},{"location":"decisoes-tecnicas/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Portugol - Site Oficial</li> <li>G-Portugol Manual: Refer\u00eancias e detalhes da linguagem G-Portugol.</li> </ul>"},{"location":"decisoes-tecnicas/#historico-de-versao","title":"Hist\u00f3rico de vers\u00e3o","text":"Vers\u00e3o Data 1.0 13/04/2025 2.0 26/06/2025"},{"location":"definicao-do-projeto/","title":"Defini\u00e7\u00e3o do Projeto: Interpretador de Portugol","text":""},{"location":"definicao-do-projeto/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O objetivo deste projeto \u00e9 desenvolver um interpretador para o pseudoc\u00f3digo de programa\u00e7\u00e3o Portugol, voltado para a disciplina de Compiladores. O interpretador foi implementado para ser capaz de ler, interpretar e executar programas simples escritos em Portugol, validando a sintaxe e executando as opera\u00e7\u00f5es definidas. O interpretador reconhece e executa instru\u00e7\u00f5es escritas em Portugol, validando a estrutura sint\u00e1tica e sem\u00e2ntica, e executando o programa por meio de uma \u00c1rvore Sint\u00e1tica Abstrata (AST).</p>"},{"location":"definicao-do-projeto/#descricao-do-sistema","title":"Descri\u00e7\u00e3o do Sistema","text":"<p>O Portugol \u00e9 pseudoc\u00f3digo de f\u00e1cil compreens\u00e3o, com uma sintaxe semelhante \u00e0 linguagem natural, o que facilita seu aprendizado. Ela \u00e9 comumente utilizada no ensino de l\u00f3gica de programa\u00e7\u00e3o. O interpretador desenvolver\u00e1 a capacidade de reconhecer e executar comandos b\u00e1sicos da linguagem.</p>"},{"location":"definicao-do-projeto/#funcionalidades-implementadas","title":"Funcionalidades implementadas","text":"<p>O interpretador possui as seguintes funcionalidades:</p> <ul> <li> <p>Analisador L\u00e9xico: Identifica\u00e7\u00e3o de tokens, como palavras-chave, identificadores, operadores e literais.</p> </li> <li> <p>Analisador Sint\u00e1tico : Verifica\u00e7\u00e3o da estrutura gramatical do c\u00f3digo, criando a \u00e1rvore de sintaxe abstrata (AST).</p> </li> <li> <p>Execu\u00e7\u00e3o: O interpretador deve executar os programas, considerando as vari\u00e1veis, controle de fluxo (condicionais e loops) e opera\u00e7\u00f5es matem\u00e1ticas.</p> </li> <li> <p>Tratamento de Erros: Mensagens de erro claras e detalhadas para problemas l\u00e9xicos, sint\u00e1ticos e sem\u00e2nticos.</p> </li> </ul>"},{"location":"definicao-do-projeto/#requisitos-funcionais","title":"Requisitos Funcionais","text":"<ul> <li>O interpretador deve ser capaz de ler um c\u00f3digo fonte em Portugol.</li> <li>O c\u00f3digo deve ser analisado sintaticamente para garantir sua validade.</li> <li>O programa deve ser executado em tempo real, exibindo resultados ou erros, conforme o c\u00f3digo fornecido.</li> <li>O c\u00f3digo-fonte ser\u00e1 dado como entrada e a sa\u00edda consistir\u00e1 em resultados da execu\u00e7\u00e3o ou mensagens de erro.</li> </ul>"},{"location":"definicao-do-projeto/#arquitetura","title":"Arquitetura","text":""},{"location":"definicao-do-projeto/#componentes-principais","title":"Componentes Principais","text":"Componente Arquivo Descri\u00e7\u00e3o Scanner (Analisador L\u00e9xico) portugol.l Respons\u00e1vel por dividir o c\u00f3digo em tokens Parser (Analisador Sint\u00e1tico) portugol.y Respons\u00e1vel por verificar a sintaxe e construir a AST AST ast.h e ast.c Representa o programa como uma estrutura hier\u00e1rquica Tabela de s\u00edmbolos tabela.h e tabela.c Gerencia vari\u00e1veis, tipos e valores Tipos tipos.h Define os tipos e estruturas base do sistema Executor Respons\u00e1vel pela execu\u00e7\u00e3o das instru\u00e7\u00f5es da AST Testes tests/ Arquivos de teste de implementa\u00e7\u00f5es e erros"},{"location":"definicao-do-projeto/#fluxo-de-execucao","title":"Fluxo de Execu\u00e7\u00e3o","text":"<ul> <li>O c\u00f3digo-fonte \u00e9 fornecido ao scanner, que converte o texto em tokens.</li> <li>O parser verifica a sintaxe e gera a \u00e1rvore de sintaxe abstrata (AST).</li> <li>O executor interpreta e executa o c\u00f3digo representado pela AST.</li> <li>Erros s\u00e3o capturados durante a execu\u00e7\u00e3o, e o sistema retorna mensagens detalhadas.</li> </ul>"},{"location":"definicao-do-projeto/#historico-de-versao","title":"Hist\u00f3rico de vers\u00e3o","text":"Vers\u00e3o Data 1.0 03/04/2025 2.0 23/06/2025"},{"location":"planejamento-sprints/","title":"Planejamento de Sprints grupo 17","text":"<p>Abaixo tem um quadro exemplificando como funcionaram as sprints planejadas pelo grupo 017 para o desenvolvimento de um interpretador de portugol.</p> Sprint Mar\u00e7o Abril Maio Junho Julho Sprint 1 \u2705 \u2705 Sprint 2 \u2705 Sprint 3 \u2705 Sprint 4 \u2705 \u2705 Sprint 5 \u2705 Sprint 6 \u2705 \u2705"},{"location":"planejamento-sprints/#sprint-1-2403-a-0904","title":"Sprint 1 (24/03 a 09/04)","text":""},{"location":"planejamento-sprints/#principais-entregas","title":"Principais Entregas","text":"<ul> <li>Documento inicial descrevendo a linguagem (tokens, estruturas, exemplos de c\u00f3digo).  </li> <li>Prot\u00f3tipo de gram\u00e1tica reconhecida pelo Bison (ainda n\u00e3o funcional, mas j\u00e1 planejada).  </li> <li>Ambiente configurado e testado (cada membro deve conseguir compilar e rodar um \u201chello world\u201d com Flex/Bison).  </li> </ul>"},{"location":"planejamento-sprints/#tarefas-e-atividades","title":"Tarefas e Atividades","text":"<ul> <li>[x]  Definir o escopo do interpretador: quais constru\u00e7\u00f5es essenciais da linguagem ser\u00e3o suportadas (tipos de dados, operadores, estruturas de controle etc.).  </li> <li>[x] Configurar reposit\u00f3rio (GitHub ou similar) e adicionar todos os membros (incluindo o professor: \u201csergioaafreitas\u201d ou \u201csergiofreitas@unb.br\u201d).  </li> <li>[x] Configurar ferramentas: Flex, Bison, compilador C/C++ (ou outra linguagem) no ambiente local.  </li> <li>[x] Criar gram\u00e1tica inicial no Bison (arquivo <code>.y</code>) e o arquivo de regras l\u00e9xicas no Flex (arquivo <code>.l</code>), ainda que incompletos.  </li> <li>[x] Montagem da documenta\u00e7\u00e3o: elaborar e validar as documenta\u00e7\u00f5es que ser\u00e3o entregues.</li> </ul>"},{"location":"planejamento-sprints/#sprint-2-1004-a-3004","title":"Sprint 2 (10/04 a 30/04)","text":""},{"location":"planejamento-sprints/#principais-entregas_1","title":"Principais Entregas","text":"<ul> <li>Arquivo <code>.l</code> completo para reconhecimento de tokens (identificadores, n\u00fameros, s\u00edmbolos, palavras-chave).  </li> <li>Primeiras regras sint\u00e1ticas no arquivo <code>.y</code>, permitindo testar c\u00f3digos simples na linguagem.  </li> <li>Formul\u00e1rio de P1 preenchido at\u00e9 28/04 (23h59), com apresenta\u00e7\u00e3o em 30/04.  </li> </ul>"},{"location":"planejamento-sprints/#tarefas-e-atividades_1","title":"Tarefas e Atividades","text":"<ul> <li>[x] Finalizar as express\u00f5es regulares no arquivo <code>.l</code> (tratando espa\u00e7os, coment\u00e1rios, etc.). </li> <li>[x] Desenvolver regras sint\u00e1ticas no Bison (estruturas b\u00e1sicas de atribui\u00e7\u00e3o, express\u00f5es, comandos simples).  </li> <li>[x] Testar tokens e parser em pequenos exemplos, validando o fluxo l\u00e9xico-sint\u00e1tico.</li> <li>[x] Preencher Formul\u00e1rio P1</li> <li>[x] Preparar material de apresenta\u00e7\u00e3o (P1) sobre o progresso (mostrar tokens reconhecidos e regras sint\u00e1ticas iniciais).  </li> <li>[x]  Montagem da documenta\u00e7\u00e3o: elaborar e validar as documenta\u00e7\u00f5es que ser\u00e3o entregues.</li> </ul>"},{"location":"planejamento-sprints/#sprint-3-0105-a-1405","title":"Sprint 3 (01/05 a 14/05)","text":""},{"location":"planejamento-sprints/#principais-entregas_2","title":"Principais Entregas","text":"<ul> <li>AST consolidada (estruturas de dados ou classes para cada tipo de n\u00f3: express\u00f5es, comandos, etc.).  </li> <li>M\u00f3dulo de an\u00e1lise sem\u00e2ntica inicial (por exemplo, verifica\u00e7\u00e3o de vari\u00e1veis declaradas e tipos simples).  </li> <li>Parser que j\u00e1 constr\u00f3i a AST durante a an\u00e1lise sint\u00e1tica, facilitando a etapa de interpreta\u00e7\u00e3o futura.  </li> </ul>"},{"location":"planejamento-sprints/#tarefas-e-atividades_2","title":"Tarefas e Atividades","text":"<ul> <li>[x] Implementar as a\u00e7\u00f5es sem\u00e2nticas no arquivo <code>.y</code> de modo a criar n\u00f3s da AST para cada constru\u00e7\u00e3o reconhecida.  </li> <li>[x] Criar tabela de s\u00edmbolos (se for necess\u00e1ria) para verificar declara\u00e7\u00f5es de vari\u00e1veis, escopos, etc.  </li> <li>[x] Tratar erros sint\u00e1ticos e sem\u00e2nticos b\u00e1sicos, exibindo mensagens significativas ao usu\u00e1rio.  </li> <li>[x] Testar a AST em pequenos programas (tanto corretos quanto com falhas de sintaxe/sem\u00e2ntica). </li> <li>[x]  Montagem da documenta\u00e7\u00e3o: elaborar e validar as documenta\u00e7\u00f5es que ser\u00e3o entregues. </li> </ul>"},{"location":"planejamento-sprints/#sprint-4-1505-a-0406","title":"Sprint 4 (15/05 a 04/06)","text":""},{"location":"planejamento-sprints/#principais-entregas_3","title":"Principais Entregas","text":"<ul> <li>M\u00f3dulo interpretador: capaz de percorrer a AST e executar instru\u00e7\u00f5es (atribui\u00e7\u00f5es, express\u00f5es, fluxos de controle).  </li> <li>An\u00e1lise sem\u00e2ntica mais robusta (ex.: tipos, escopo, vari\u00e1veis n\u00e3o declaradas, e poss\u00edveis alertas em tempo de execu\u00e7\u00e3o).  </li> <li>Formul\u00e1rio de P2 preenchido at\u00e9 02/06 (23h59) e apresenta\u00e7\u00e3o em 04/06.  </li> </ul>"},{"location":"planejamento-sprints/#tarefas-e-atividades_3","title":"Tarefas e Atividades","text":"<ul> <li>[x] Criar a l\u00f3gica de interpreta\u00e7\u00e3o recursiva (ex.: <code>interpretNode()</code>, que avalia n\u00f3s de express\u00e3o/comando).  </li> <li>[x] Consolidar estruturas de controle (if, while, etc.), garantindo que a AST as represente adequadamente.  </li> <li>[x] Testar o interpretador com programas de exemplo que demonstrem a execu\u00e7\u00e3o de comandos b\u00e1sicos.  </li> <li>[x] Preencher Formul\u00e1rio P2</li> <li>[x] Preparar a apresenta\u00e7\u00e3o P2, mostrando as novidades desde o P1 e a interpreta\u00e7\u00e3o funcionando.  </li> <li>[x] Montagem da documenta\u00e7\u00e3o: elaborar e validar as documenta\u00e7\u00f5es que ser\u00e3o entregues.</li> </ul>"},{"location":"planejamento-sprints/#sprint-5-0506-a-2506","title":"Sprint 5 (05/06 a 25/06)","text":""},{"location":"planejamento-sprints/#principais-entregas_4","title":"Principais Entregas","text":"<ul> <li>Interpretador ampliado, com eventuais otimiza\u00e7\u00f5es e funcionalidades extras.  </li> <li>Testes de integra\u00e7\u00e3o em diversos programas de exemplo.  </li> <li>Vers\u00e3o final pronta para entrega at\u00e9 27/06 (23h59) via Teams.  </li> </ul>"},{"location":"planejamento-sprints/#tarefas-e-atividades_4","title":"Tarefas e Atividades","text":"<ul> <li>[x] Implementar otimiza\u00e7\u00f5es simples (constant folding, remo\u00e7\u00e3o de n\u00f3s redundantes, etc.).</li> <li>[x] Testar intensivamente (abordando constru\u00e7\u00f5es avan\u00e7adas e casos-limite).  </li> <li>[x] Entregar o projeto final (reposit\u00f3rio atualizado, acesso ao professor, e arquivo zip, se exigido).  </li> <li>[x] Montagem da documenta\u00e7\u00e3o: elaborar e validar as documenta\u00e7\u00f5es que ser\u00e3o entregues.</li> </ul>"},{"location":"planejamento-sprints/#sprint-6-2606-a-0907","title":"Sprint 6 (26/06 a 09/07)","text":""},{"location":"planejamento-sprints/#principais-entregas_5","title":"Principais Entregas","text":"<ul> <li>Entrevistas de entrega do projeto final (toda a equipe deve estar presente).  </li> <li>Documenta\u00e7\u00e3o completa (README, manual de uso, explica\u00e7\u00f5es sobre a AST e a execu\u00e7\u00e3o).  </li> <li>Ajustes finais (caso o professor detecte problemas).  </li> </ul>"},{"location":"planejamento-sprints/#tarefas-e-atividades_5","title":"Tarefas e Atividades","text":"<ul> <li>[x] Preparar-se para as entrevistas: cada membro deve entender bem o parser, a AST, a an\u00e1lise sem\u00e2ntica e o interpretador.  </li> <li>[ ] Corrigir eventuais falhas apontadas pelo professor durante as entrevistas ou testes.</li> <li>[ ] Finalizar documenta\u00e7\u00e3o e organizar exemplos de uso.  </li> </ul>"},{"location":"planejamento-sprints/#link-do-notion-com-o-andamento-das-sprints","title":"Link do Notion com o andamento das Sprints","text":"<p>Notion - Planejamento das Sprints</p>"},{"location":"planejamento-sprints/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ol> <li>Alguns dias de aula, na quarta feira, ser\u00e3o utilizadas para rodar as \u201cdailies\u201d e revisar backlog de tarefas, mantendo transpar\u00eancia sobre o que cada um est\u00e1 fazendo, assim como para reuni\u00f5es de review para demonstrar o que foi conclu\u00eddo e alinhar o que entra no pr\u00f3ximo Sprint.  </li> <li>Sempre que poss\u00edvel ser\u00e1 mantido testes automatizados para cada fase: l\u00e9xica, sint\u00e1tica, sem\u00e2ntica, gera\u00e7\u00e3o de c\u00f3digo e execu\u00e7\u00e3o final.  </li> <li>No dia 26/03 (qua), aula pr\u00e1tica para configurar o ambiente de desenvolvimento de interpretadores.  </li> <li>A Sprint 2 fecha em 30/04 com a apresenta\u00e7\u00e3o do P1.  </li> <li>As quartas-feiras (07/05 e 14/05) s\u00e3o dedicadas ao desenvolvimento pr\u00e1tico e integra\u00e7\u00e3o das tarefas.  </li> <li>Mantenha commits est\u00e1veis no reposit\u00f3rio para evitar regress\u00f5es (e documentem bem a AST)</li> <li>Aulas pr\u00e1ticas (21/05, 28/05 e 04/06) para integrar e corrigir bugs. </li> <li>A Sprint 4 termina com a apresenta\u00e7\u00e3o P2 (04/06).  </li> <li>Aulas dos dias (11/06, 18/06, 25/06) s\u00e3o fundamentais para corrigir bugs e integrar tudo.</li> <li>As entrevistas ocorrer\u00e3o em 30/06 (seg) e 02/07 (qua). Falta de comparecimento pode zerar a nota da apresenta\u00e7\u00e3o final.</li> </ol>"},{"location":"planejamento-sprints/#historico-de-versao","title":"Hist\u00f3rico de vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o 1.0 03/04/2025 Cria\u00e7\u00e3o do documento de Planejamento das Sprints 1.1 19/04/2025 Inclus\u00e3o do link para o Notion 1.2 24/04/2025 Atualiza\u00e7\u00e3o das tarefas da Sprint 2 2.0 26/06/2025 Finaliza\u00e7\u00f5es"},{"location":"problemas-solucoes/","title":"Problemas encontrados e solu\u00e7\u00f5es adotadas","text":"<p>Durante o desenvolvimento do interpretador para a linguagem de programa\u00e7\u00e3o Portugol, alguns problemas foram encontrados, principalmente no que se refere \u00e0 constru\u00e7\u00e3o e implementa\u00e7\u00e3o da gram\u00e1tica e ao tratamento de conflitos durante o processo de an\u00e1lise sint\u00e1tica. Abaixo est\u00e3o as dificuldades encontradas e as solu\u00e7\u00f5es implementadas para super\u00e1-las.</p>"},{"location":"problemas-solucoes/#1-conflitos-de-shiftreduce","title":"1. Conflitos de Shift/Reduce","text":"<p>Um dos primeiros problemas foi a ocorr\u00eancia de conflitos de shift/reduce durante a an\u00e1lise sint\u00e1tica. Esse tipo de conflito ocorreu quando o parser n\u00e3o sabia se deveria \"deslocar\" para o pr\u00f3ximo token ou \"reduzir\" a produ\u00e7\u00e3o de uma regra gramatical. Os conflitos estavam relacionados a comandos como <code>SE</code>, <code>SENAO</code>, <code>ENQUANTO</code>, e operadores como <code>IGUAL</code>, <code>MAIOR</code>, entre outros.</p>"},{"location":"problemas-solucoes/#solucao-encontrada","title":"Solu\u00e7\u00e3o Encontrada","text":"<pre><code>comando:\n  SE expressao ENTAO lista_comandos FIM_SE\n  | SE expressao ENTAO lista_comandos SENAO lista_comandos FIM_SE\n  | SENAO lista_comandos\n</code></pre> <p>Uso da diretiva <code>%nonassoc</code> para resolver ambiguidade de <code>SENAO</code>: A diretiva <code>%nonassoc SENAO</code> foi utilizada para garantir que o comando <code>SENAO</code> fosse corretamente atribu\u00eddo a um bloco condicional e n\u00e3o causasse ambiguidades.</p>"},{"location":"problemas-solucoes/#2-ambiguidade-na-gramatica-do-comando-se","title":"2. Ambiguidade na Gram\u00e1tica do Comando <code>SE</code>","text":"<p>Os comandos <code>SE</code>, <code>SENAO</code> e <code>FIM_SE</code> estavam sendo interpretados de forma amb\u00edgua em algumas situa\u00e7\u00f5es, causando dificuldades no controle de fluxo da execu\u00e7\u00e3o. Isso ficou especialmente evidente quando o SE estava aninhado ou quando n\u00e3o havia um <code>SENAO</code>.</p>"},{"location":"problemas-solucoes/#solucao-encontrada_1","title":"Solu\u00e7\u00e3o Encontrada","text":"<p>Uso de pilhas (exec_stack e cond_stack) para controle de execu\u00e7\u00e3o dentro dos blocos condicionais. As pilhas permitiram armazenar o estado de execu\u00e7\u00e3o para cada n\u00edvel de <code>SE</code>, garantindo que os comandos fossem executados ou ignorados corretamente.</p> <pre><code>  exec_stack[exec_sp] = executando;\n  cond_stack[exec_sp] = $2;  // Condi\u00e7\u00e3o do SE\n  executando = executando &amp;&amp; $2;\n  exec_sp++;\n</code></pre> <p>Corre\u00e7\u00e3o do tratamento do comando <code>SENAO</code>: O comando <code>SENAO</code> foi tratado de forma que, ao ser executado, ele reverte o estado da execu\u00e7\u00e3o para garantir que apenas o ramo correto seja executado. A pilha <code>exec_stack</code> foi usada para armazenar o estado do \"pai\", enquanto <code>cond_stack</code> mantinha o estado das condi\u00e7\u00f5es, permitindo alternar corretamente entre os blocos <code>SE</code> e <code>SENAO</code>.</p>"},{"location":"problemas-solucoes/#3-identificadores-nao-reconhecidos-em-expressoes-do-parser","title":"3. Identificadores N\u00e3o Reconhecidos em Express\u00f5es do Parser","text":"<p>Durante os testes com express\u00f5es envolvendo vari\u00e1veis, como o exemplo abaixo, foi detectado um erro sint\u00e1tico na linha onde ocorre a atribui\u00e7\u00e3o <code>media = (x + y);</code>. O analisador sint\u00e1tico (parser) n\u00e3o reconhecia identificadores <code>(x, y)</code> como operandos v\u00e1lidos em express\u00f5es aritm\u00e9ticas. Isso ocorria porque a gram\u00e1tica do parser (<code>portugol.y</code>) n\u00e3o contemplava a possibilidade de IDENTIFICADORES serem utilizados dentro da regra <code>expressao</code>.</p> <pre><code>inteiro x;\nx = 0;\n\ninteiro y;\ny = 10;\n\nreal media;\nmedia = (x + y);\n</code></pre>"},{"location":"problemas-solucoes/#solucao-encontrada_2","title":"Solu\u00e7\u00e3o Encontrada","text":"<p>Como solu\u00e7\u00e3o foi adicionada uma nova produ\u00e7\u00e3o \u00e0 regra <code>expressao</code> no arquivo <code>portugol.y</code> para permitir o uso de vari\u00e1veis j\u00e1 declaradas nas opera\u00e7\u00f5es. A nova produ\u00e7\u00e3o trata a recupera\u00e7\u00e3o do valor do identificador de acordo com o seu tipo, acessando a tabela de s\u00edmbolos. A regra adicionada foi:</p> <pre><code>| IDENTIFICADOR {\n    Simbolo *s = buscarSimbolo($1);\n    if (!s) {\n        yyerror(\"Variavel nao declarada.\");\n        $$ = 0;\n    } else if (s-&gt;tipo == TIPO_INT) {\n        $$ = s-&gt;valor.intValue;\n    } else if (s-&gt;tipo == TIPO_REAL) {\n        $$ = s-&gt;valor.floatValue;\n    } else {\n        yyerror(\"Tipo nao suportado em expressao.\");\n        $$ = 0;\n    }\n    free($1);\n}\n</code></pre> <p>Com essa modifica\u00e7\u00e3o, o parser passa a aceitar express\u00f5es do tipo <code>x + y</code>, onde <code>x</code> e <code>y</code> s\u00e3o vari\u00e1veis previamente declaradas e atribu\u00eddas, permitindo o uso mais realista de vari\u00e1veis em express\u00f5es matem\u00e1ticas no interpretador.</p>"},{"location":"problemas-solucoes/#4-strings-nao-reconhecidas","title":"4. Strings N\u00e3o Reconhecidas","text":"<p>Durante a valida\u00e7\u00e3o e teste do c\u00f3digo, foi encontrado o erro em que vari\u00e1veis do tipo caractere n\u00e3o estavam reconhecendo as strings recebidas como um dado a ser guardado, causando um erro de s\u00edntaxe.</p>"},{"location":"problemas-solucoes/#conclusao","title":"Conclus\u00e3o","text":"<p>As principais dificuldades enfrentadas no desenvolvimento do interpretador de Portugol estavam relacionadas a conflitos de an\u00e1lise sint\u00e1tica e a correta implementa\u00e7\u00e3o do fluxo de execu\u00e7\u00e3o de comandos condicionais. As solu\u00e7\u00f5es adotadas envolveram ajustes na gram\u00e1tica para evitar ambiguidade e implementa\u00e7\u00e3o de pilhas para controle de execu\u00e7\u00e3o. Essas corre\u00e7\u00f5es permitiram que o interpretador fosse capaz de processar corretamente os programas escritos em Portugol.</p> <pre><code>caractere nome;\nnome = \"Socorro\";\n</code></pre>"},{"location":"problemas-solucoes/#solucao-encontrada_3","title":"Solu\u00e7\u00e3o Encontrada","text":"<p>Como solu\u00e7\u00e3o para esse problema, foi adicionado um novo bloco de regras <code>expressao_string</code>, no arquivo <code>portugol.y</code> que continha todas as condi\u00e7\u00f5es e regras para o funcionamento do recebimento de strings por vari\u00e1veis.</p> <pre><code>expressao_string:\n    STRING { $$ = strdup($1); }\n  | IDENTIFICADOR {\n        Simbolo *s = buscarSimbolo($1);\n        if (!s) {\n            yyerror(\"Variavel nao declarada.\");\n            $$ = strdup(\"\");\n        } else if (s-&gt;tipo == TIPO_STRING) {\n            $$ = strdup(s-&gt;valor.strValue);\n        } else {\n            yyerror(\"Tipo nao string em expressao string.\");\n            $$ = strdup(\"\");\n        }\n        free($1);\n    }\n;\n</code></pre> <p>Tamb\u00e9m foi adicionado o tipo de vari\u00e1vel string a condi\u00e7\u00e3o de impress\u00e3o que permitiu o c\u00f3digo a imprimir no terminal as vari\u00e1veis do tipo caractere quando chamadas.</p> <pre><code>| IMPRIMA IDENTIFICADOR ';' {\n        if (executando) {\n            Simbolo *s = buscarSimbolo($2);\n            if (!s) {\n                yyerror(\"Erro: Variavel nao declarada.\");\n            } else if (s-&gt;tipo == TIPO_INT) {\n                printf(\"%d\\n\", s-&gt;valor.intValue);\n            } else if (s-&gt;tipo == TIPO_REAL) {\n                printf(\"%f\\n\", s-&gt;valor.floatValue);\n            } else if (s-&gt;tipo == TIPO_STRING) {\n                printf(\"%s\\n\", s-&gt;valor.strValue);\n            }\n        }\n        free($2);\n    }\n</code></pre>"},{"location":"problemas-solucoes/#historico-de-versao","title":"Hist\u00f3rico de vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o 1.0 28/04/2025 Cria\u00e7\u00e3o do documento de Problemas e solu\u00e7\u00f5es encontrados 1.1 01/06/2025 Adi\u00e7\u00e3o dos Problemas e Solu\u00e7\u00f5es das sprints 3 e 4"}]}